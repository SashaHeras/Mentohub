// <auto-generated />
using System;
using Mentohub.Core.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Mentohub.Core.Migrations
{
    [DbContext(typeof(ProjectContext))]
    partial class ProjectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Mentohub.Domain.Data.Entities.CourseEntities.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Checked")
                        .HasColumnType("boolean");

                    b.Property<int?>("CourseLevelID")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<int>("CourseSubjectId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("LanguageID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("LastEdittingDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LoadPictureName")
                        .HasColumnType("text");

                    b.Property<string>("LoadVideoName")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PicturePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreviewVideoPath")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<double>("Rating")
                        .HasColumnType("double precision");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CourseLevelID");

                    b.HasIndex("LanguageID");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Mentohub.Domain.Data.Entities.CourseEntities.CourseBlock", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("CourseID")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.ToTable("CourseBlocks");
                });

            modelBuilder.Entity("Mentohub.Domain.Data.Entities.CourseEntities.CourseItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseBlockID")
                        .HasColumnType("integer");

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<int>("TypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourseBlockID");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseItem");
                });

            modelBuilder.Entity("Mentohub.Domain.Data.Entities.CourseEntities.CourseItemType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CourseItemTypes");
                });

            modelBuilder.Entity("Mentohub.Domain.Data.Entities.CourseEntities.CourseLanguage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CourseLanguages");
                });

            modelBuilder.Entity("Mentohub.Domain.Data.Entities.CourseEntities.CourseLevel", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("CourseLevel");
                });

            modelBuilder.Entity("Mentohub.Domain.Data.Entities.CourseEntities.CourseOverview", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<int>("CourseID")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.ToTable("CourseOverviews");
                });

            modelBuilder.Entity("Mentohub.Domain.Data.Entities.CourseEntities.CourseSubject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CourseSubjects");
                });

            modelBuilder.Entity("Mentohub.Domain.Data.Entities.CourseEntities.CourseTag", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CourseID")
                        .HasColumnType("integer");

                    b.Property<int>("TagID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.HasIndex("TagID");

                    b.ToTable("CourseTag");
                });

            modelBuilder.Entity("Mentohub.Domain.Data.Entities.CourseEntities.CourseViews", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CourseID")
                        .HasColumnType("integer");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ViewDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("ID");

                    b.HasIndex("CourseID");

                    b.HasIndex("UserID");

                    b.ToTable("CourseViews");
                });

            modelBuilder.Entity("Mentohub.Domain.Data.Entities.CourseEntities.Tag", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserID")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("Mentohub.Domain.Data.Entities.CurrentUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("AboutMe")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Mentohub.Domain.Entities.AnswerHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnswerId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<int>("TaskHistoryId")
                        .HasColumnType("integer");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("TaskHistoryId");

                    b.HasIndex("TaskId");

                    b.ToTable("AnswerHistory");
                });

            modelBuilder.Entity("Mentohub.Domain.Entities.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Mentohub.Domain.Entities.ItemStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ItemsStatuses");
                });

            modelBuilder.Entity("Mentohub.Domain.Entities.Lesson", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CourseItemId")
                        .HasColumnType("integer");

                    b.Property<string>("DateCreation")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LoadVideoName")
                        .HasColumnType("text");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("VideoPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CourseItemId")
                        .IsUnique();

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("Mentohub.Domain.Entities.TaskAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskAnswers");
                });

            modelBuilder.Entity("Mentohub.Domain.Entities.TaskHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.Property<int>("TestHistoryId")
                        .HasColumnType("integer");

                    b.Property<double>("UserMark")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("TestHistoryId");

                    b.ToTable("TaskHistory");
                });

            modelBuilder.Entity("Mentohub.Domain.Entities.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CourseItemId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CourseItemId")
                        .IsUnique();

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("Mentohub.Domain.Entities.TestHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("Mark")
                        .HasColumnType("double precision");

                    b.Property<int>("TestId")
                        .HasColumnType("integer");

                    b.Property<double>("TotalMark")
                        .HasColumnType("double precision");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.HasIndex("UserId");

                    b.ToTable("TestHistory");
                });

            modelBuilder.Entity("Mentohub.Domain.Entities.TestTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsFewAnswersCorrect")
                        .HasColumnType("boolean");

                    b.Property<double>("Mark")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrderNumber")
                        .HasColumnType("integer");

                    b.Property<int>("TestId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TestId");

                    b.ToTable("TestTasks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Mentohub.Domain.Data.Entities.CourseEntities.Course", b =>
                {
                    b.HasOne("Mentohub.Domain.Data.Entities.CurrentUser", "Author")
                        .WithMany("Courses")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mentohub.Domain.Data.Entities.CourseEntities.CourseLevel", "CourseLevel")
                        .WithMany("Courses")
                        .HasForeignKey("CourseLevelID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mentohub.Domain.Data.Entities.CourseEntities.CourseLanguage", "Language")
                        .WithMany("Courses")
                        .HasForeignKey("LanguageID");

                    b.Navigation("Author");

                    b.Navigation("CourseLevel");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Mentohub.Domain.Data.Entities.CourseEntities.CourseBlock", b =>
                {
                    b.HasOne("Mentohub.Domain.Data.Entities.CourseEntities.Course", "Course")
                        .WithMany("CourseBlocks")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Mentohub.Domain.Data.Entities.CourseEntities.CourseItem", b =>
                {
                    b.HasOne("Mentohub.Domain.Data.Entities.CourseEntities.CourseBlock", "CourseBlock")
                        .WithMany("CourseItems")
                        .HasForeignKey("CourseBlockID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mentohub.Domain.Data.Entities.CourseEntities.Course", "Course")
                        .WithMany("CourseItems")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("CourseBlock");
                });

            modelBuilder.Entity("Mentohub.Domain.Data.Entities.CourseEntities.CourseOverview", b =>
                {
                    b.HasOne("Mentohub.Domain.Data.Entities.CourseEntities.Course", "Course")
                        .WithMany("CourseOverviews")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Mentohub.Domain.Data.Entities.CourseEntities.CourseTag", b =>
                {
                    b.HasOne("Mentohub.Domain.Data.Entities.CourseEntities.Course", "Course")
                        .WithMany("CourseTags")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mentohub.Domain.Data.Entities.CourseEntities.Tag", "Tag")
                        .WithMany("CourseTags")
                        .HasForeignKey("TagID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Mentohub.Domain.Data.Entities.CourseEntities.CourseViews", b =>
                {
                    b.HasOne("Mentohub.Domain.Data.Entities.CourseEntities.Course", "Course")
                        .WithMany("CourseViews")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mentohub.Domain.Data.Entities.CurrentUser", "User")
                        .WithMany("CourseViews")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mentohub.Domain.Data.Entities.CourseEntities.Tag", b =>
                {
                    b.HasOne("Mentohub.Domain.Data.Entities.CurrentUser", "User")
                        .WithMany("Tags")
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mentohub.Domain.Entities.AnswerHistory", b =>
                {
                    b.HasOne("Mentohub.Domain.Entities.TaskAnswer", "TaskAnswer")
                        .WithMany("AnswerHistory")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mentohub.Domain.Entities.TaskHistory", "TaskHistory")
                        .WithMany("AnswerHistory")
                        .HasForeignKey("TaskHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mentohub.Domain.Entities.TestTask", "TestTask")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskAnswer");

                    b.Navigation("TaskHistory");

                    b.Navigation("TestTask");
                });

            modelBuilder.Entity("Mentohub.Domain.Entities.Comment", b =>
                {
                    b.HasOne("Mentohub.Domain.Data.Entities.CourseEntities.Course", "Course")
                        .WithMany("Comments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mentohub.Domain.Data.Entities.CurrentUser", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mentohub.Domain.Entities.Lesson", b =>
                {
                    b.HasOne("Mentohub.Domain.Data.Entities.CourseEntities.CourseItem", "CourseItem")
                        .WithOne("Lesson")
                        .HasForeignKey("Mentohub.Domain.Entities.Lesson", "CourseItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseItem");
                });

            modelBuilder.Entity("Mentohub.Domain.Entities.TaskAnswer", b =>
                {
                    b.HasOne("Mentohub.Domain.Entities.TestTask", "TestTask")
                        .WithMany("TaskAnswers")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestTask");
                });

            modelBuilder.Entity("Mentohub.Domain.Entities.TaskHistory", b =>
                {
                    b.HasOne("Mentohub.Domain.Entities.TestTask", "TestTask")
                        .WithMany("TaskHistory")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mentohub.Domain.Entities.TestHistory", "TestHistory")
                        .WithMany("TaskHistory")
                        .HasForeignKey("TestHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestHistory");

                    b.Navigation("TestTask");
                });

            modelBuilder.Entity("Mentohub.Domain.Entities.Test", b =>
                {
                    b.HasOne("Mentohub.Domain.Data.Entities.CourseEntities.CourseItem", "CourseItem")
                        .WithOne("Test")
                        .HasForeignKey("Mentohub.Domain.Entities.Test", "CourseItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseItem");
                });

            modelBuilder.Entity("Mentohub.Domain.Entities.TestHistory", b =>
                {
                    b.HasOne("Mentohub.Domain.Entities.Test", "Test")
                        .WithMany("TestHistory")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mentohub.Domain.Data.Entities.CurrentUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Mentohub.Domain.Entities.TestTask", b =>
                {
                    b.HasOne("Mentohub.Domain.Entities.Test", "Test")
                        .WithMany("TestTasks")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Test");
                });

            modelBuilder.Entity("Mentohub.Domain.Data.Entities.CourseEntities.Course", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("CourseBlocks");

                    b.Navigation("CourseItems");

                    b.Navigation("CourseOverviews");

                    b.Navigation("CourseTags");

                    b.Navigation("CourseViews");
                });

            modelBuilder.Entity("Mentohub.Domain.Data.Entities.CourseEntities.CourseBlock", b =>
                {
                    b.Navigation("CourseItems");
                });

            modelBuilder.Entity("Mentohub.Domain.Data.Entities.CourseEntities.CourseItem", b =>
                {
                    b.Navigation("Lesson")
                        .IsRequired();

                    b.Navigation("Test")
                        .IsRequired();
                });

            modelBuilder.Entity("Mentohub.Domain.Data.Entities.CourseEntities.CourseLanguage", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Mentohub.Domain.Data.Entities.CourseEntities.CourseLevel", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Mentohub.Domain.Data.Entities.CourseEntities.Tag", b =>
                {
                    b.Navigation("CourseTags");
                });

            modelBuilder.Entity("Mentohub.Domain.Data.Entities.CurrentUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("CourseViews");

                    b.Navigation("Courses");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Mentohub.Domain.Entities.TaskAnswer", b =>
                {
                    b.Navigation("AnswerHistory");
                });

            modelBuilder.Entity("Mentohub.Domain.Entities.TaskHistory", b =>
                {
                    b.Navigation("AnswerHistory");
                });

            modelBuilder.Entity("Mentohub.Domain.Entities.Test", b =>
                {
                    b.Navigation("TestHistory");

                    b.Navigation("TestTasks");
                });

            modelBuilder.Entity("Mentohub.Domain.Entities.TestHistory", b =>
                {
                    b.Navigation("TaskHistory");
                });

            modelBuilder.Entity("Mentohub.Domain.Entities.TestTask", b =>
                {
                    b.Navigation("TaskAnswers");

                    b.Navigation("TaskHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
